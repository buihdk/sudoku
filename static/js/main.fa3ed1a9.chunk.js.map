{"version":3,"sources":["reducers/actions.ts","global.ts","utils/check-grid/index.ts","utils/create-full-grid/index.ts","utils/get-random-index/index.ts","utils/fill-grid/index.ts","utils/identify-square/index.ts","utils/is-in/col/index.ts","utils/is-in/row/index.ts","utils/is-in/square/index.ts","utils/shuffle/index.ts","utils/index.ts","reducers/reducer.ts","components/grid/block.tsx","components/grid/index.tsx","components/numbers/button/index.tsx","components/numbers/styles/index.ts","components/numbers/index.tsx","components/timer/index.tsx","components/styles/button/index.ts","components/styles/card/index.ts","components/styles/content/index.ts","components/styles/title/index.ts","serviceWorkerRegistration.ts","reportWebVitals.ts","styles/global.ts","configure-store/index.ts","index.tsx","styles/theme.ts","reducers/index.ts","reducers/types.ts"],"names":["createGrid","type","types","fillBlock","value","coords","selectBlock","counter","checkGrid","grid","i","j","createFullGrid","fillGrid","getRandomIndex","Math","floor","random","numbers","row","col","shuffle","isInRow","isInCol","square","identifyingSquare","isInSquare","identifyWorkingSquare","x","push","includes","array","length","copyGrid","gridCopy","r","c","solveGrid","global","removeNumbers","attempts","backup","compareArrays","arr1","arr2","Array","isArray","len","initialState","incorrectCount","completed","reducer","state","action","solvedGrid","challengeGrid","workingGrid","alert","selectedBlock","Container","styled","div","active","puzzle","theme","css","colors","blue","white","black","transition","lightBlue","Block","colIndex","rowIndex","useSelector","isActive","isPuzzle","dispatch","useDispatch","data-cy","onClick","Row","Grid","selectedValue","create","useCallback","fill","n","useMousetrap","useEffect","Children","toArray","map","_","NumberButton","Button","Numbers","Timer","useState","timer","setTimer","intervalRef","useRef","current","setInterval","clearInterval","Card","Content","Title","h1","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createGlobalStyle","background","configureStore","store","createStore","devToolsEnhancer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","CREATE_GRID","FILL_BLOCK","SELECT_BLOCK"],"mappings":"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","file":"static/js/main.fa3ed1a9.chunk.js","sourcesContent":["import { Action, AnyAction } from 'redux'\nimport { BLOCK_COORDS, NUMBERS } from 'typings'\n\nimport * as types from './types'\n\nexport const createGrid = (): Action => ({ type: types.CREATE_GRID })\n\nexport const fillBlock = (value: NUMBERS, coords: BLOCK_COORDS): AnyAction => ({\n  coords,\n  type: types.FILL_BLOCK,\n  value,\n})\n\nexport const selectBlock = (coords: BLOCK_COORDS): AnyAction => ({\n  coords,\n  type: types.SELECT_BLOCK,\n})\n","export default {\n  counter: 0,\n}\n","import { GRID } from 'typings'\n\n/**\n * A function to check if the grid is full\n * @param grid A 9x9 Sudoku Grid\n * @returns true if full and vice versa\n */\nconst checkGrid = (grid: GRID): boolean => {\n  for (let i = 0; i < 9; i++) {\n    for (let j = 0; j < 9; j++) {\n      if (grid[i][j] === 0) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nexport default checkGrid\n","import { GRID } from 'typings'\nimport { fillGrid } from 'utils'\n\n/**\n * A function to create a full valid sudoku grid\n */\nconst createFullGrid = (): GRID => {\n  const grid: GRID = [\n    [0, 4, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 9, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 3, 0, 0, 0],\n    [0, 0, 2, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  ]\n  fillGrid(grid)\n\n  return grid\n}\n\nexport default createFullGrid\n","/**\n * Return a random sudoku grid index in the 0 to 8 range\n */\nconst getRandomIndex = () => {\n  return Math.floor(Math.random() * Math.floor(9))\n}\n\nexport default getRandomIndex\n","import { GRID, NUMBERS } from 'typings'\nimport {\n  checkGrid,\n  identifyingSquare,\n  isInCol,\n  isInRow,\n  isInSquare,\n  shuffle,\n} from 'utils'\n\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n/**\n * A backtracking/recursive function to check all the possible combinations of number until a solution is found\n * @param grid : 9x9 Sudoku grid;\n */\nfunction fillGrid(grid: GRID) {\n  let row = 0\n  let col = 0\n\n  for (let i = 0; i < 81; i++) {\n    row = Math.floor(i / 9)\n    col = i % 9\n\n    if (grid[row][col] === 0) {\n      shuffle(numbers)\n      for (let value of numbers) {\n        if (!isInRow({ grid, row, value })) {\n          if (!isInCol({ col, grid, value })) {\n            const square = identifyingSquare({ col, grid, row })\n            if (!isInSquare({ square, value })) {\n              grid[row][col] = value\n              if (checkGrid(grid)) return true\n              else if (fillGrid(grid)) return true\n            }\n          }\n        }\n      }\n      break\n    }\n  }\n\n  grid[row][col] = 0\n}\n\nexport default fillGrid\n","import { GRID, SQUARE } from 'typings'\n\ninterface IInput {\n  grid: GRID\n  row: number\n  col: number\n}\n\n/**\n * A function that identifies and returns the current square of a given sudoku grid at a row and column index.\n * @param input Object with 9x9 Sudoku Grid, row index and column index\n * @returns\n */\nconst identifyWorkingSquare = ({ col, grid, row }: IInput): SQUARE => {\n  const square = []\n\n  if (row < 3) {\n    if (col < 3) {\n      for (let x = 0; x < 3; x++) {\n        square.push([grid[x][0], grid[x][1], grid[x][2]])\n      }\n    } else if (col < 6) {\n      for (let x = 0; x < 3; x++) {\n        square.push([grid[x][3], grid[x][4], grid[x][5]])\n      }\n    } else {\n      for (let x = 0; x < 3; x++) {\n        square.push([grid[x][6], grid[x][7], grid[x][8]])\n      }\n    }\n  } else if (row < 6) {\n    if (col < 3) {\n      for (let x = 3; x < 6; x++) {\n        square.push([grid[x][0], grid[x][1], grid[x][2]])\n      }\n    } else if (col < 6) {\n      for (let x = 3; x < 6; x++) {\n        square.push([grid[x][3], grid[x][4], grid[x][5]])\n      }\n    } else {\n      for (let x = 3; x < 6; x++) {\n        square.push([grid[x][6], grid[x][7], grid[x][8]])\n      }\n    }\n  } else {\n    if (col < 3) {\n      for (let x = 6; x < 9; x++) {\n        square.push([grid[x][0], grid[x][1], grid[x][2]])\n      }\n    } else if (col < 6) {\n      for (let x = 6; x < 9; x++) {\n        square.push([grid[x][3], grid[x][4], grid[x][5]])\n      }\n    } else {\n      for (let x = 6; x < 9; x++) {\n        square.push([grid[x][6], grid[x][7], grid[x][8]])\n      }\n    }\n  }\n\n  return square as SQUARE\n}\n\nexport default identifyWorkingSquare\n","import { GRID, NUMBERS } from 'typings'\n\ninterface IInput {\n  col: number\n  grid: GRID\n  value: NUMBERS\n}\n\n/**\n * A function that returns true if the value is already being used in the current grid column.\n * @param input Object with 9x9 Sudoku Grid, column index and value.\n * @returns\n */\nconst isInCol = ({ col, grid, value }: IInput): boolean => {\n  for (let i = 0; i < 9; i++) {\n    if (value === grid[i][col]) return true\n  }\n  return false\n}\n\nexport default isInCol\n","import { GRID, NUMBERS } from 'typings'\n\ninterface IInput {\n  grid: GRID\n  row: number\n  value: NUMBERS\n}\n\n/**\n * A function that returns true if the value is already being used in the current grid row.\n * @param input Object with 9x9 Sudoku Grid, row index and value\n * @returns boolean\n */\nconst isInRow = ({ grid, row, value }: IInput): boolean =>\n  grid[row].includes(value)\n\nexport default isInRow\n","import { NUMBERS, SQUARE } from 'typings'\n\ninterface IInput {\n  square: SQUARE\n  value: NUMBERS\n}\n\n/**\n * A function that returns true if the value is already being used in the current grid square.\n * @param input Object with 3x3 square and value.\n * @returns\n */\nconst isInSquare = ({ square, value }: IInput): boolean =>\n  [...square[0], ...square[1], ...square[2]].includes(value)\n\nexport default isInSquare\n","/**\n * An array shuffling using the Fisher-Yates shuffle algorithm\n * @param array An array that you want shuffled\n */\nfunction shuffle(array: any[]) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1))\n    ;[array[i], array[j]] = [array[j], array[i]]\n  }\n}\n\nexport default shuffle\n","import global from 'global'\nimport { GRID, INDEX, NUMBERS } from 'typings'\nimport {\n  checkGrid,\n  identifyingSquare,\n  isInCol,\n  isInRow,\n  isInSquare,\n  getRandomIndex,\n} from 'utils'\n\nexport { default as checkGrid } from './check-grid'\nexport { default as createFullGrid } from './create-full-grid'\nexport { default as getRandomIndex } from './get-random-index'\nexport { default as fillGrid } from './fill-grid'\nexport { default as identifyingSquare } from './identify-square'\nexport * from './is-in'\nexport { default as shuffle } from './shuffle'\n\nexport const copyGrid = (grid: GRID): GRID => {\n  const gridCopy: GRID = [\n    [0, 4, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 9, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 1, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 3, 0, 0, 0],\n    [0, 0, 2, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  ]\n\n  for (let r: INDEX = 0; r < 9; r++) {\n    for (let c: INDEX = 0; c < 9; c++) {\n      gridCopy[r][c] = grid[r][c]\n    }\n  }\n\n  return gridCopy\n}\n\nconst numbers: NUMBERS[] = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n/**\n * A backtrcking/recursive function to check all possible combinations of numbers until a solution is found\n * @param grid A 9x9 array consisting of values from 0 to 9\n */\nexport const solveGrid = (grid: GRID) => {\n  let row = 0\n  let col = 0\n\n  for (let i = 0; i < 81; i++) {\n    row = Math.floor(i / 9)\n    col = i % 9\n\n    if (grid[row][col] === 0) {\n      for (let value of numbers) {\n        if (!isInRow({ grid, row, value })) {\n          if (!isInCol({ grid, col, value })) {\n            const square = identifyingSquare({ grid, row, col })\n            if (!isInSquare({ square, value })) {\n              grid[row][col] = value\n              if (checkGrid(grid)) {\n                global.counter++\n                break\n              } else if (solveGrid(grid)) return true\n            }\n          }\n        }\n      }\n      break\n    }\n  }\n\n  grid[row][col] = 0\n}\n\n/**\n * Removes numbers from a full grid to create a Sudoku puzzle.\n * @param grid 9x9 Sudoku Grid\n * @param attempts number of attemps to solve (higher means more difficult) - default 5\n * @returns\n */\nexport const removeNumbers = (grid: GRID, attempts = 5): GRID => {\n  while (attempts > 0) {\n    let row = getRandomIndex()\n    let col = getRandomIndex()\n\n    while (grid[row][col] === 0) {\n      row = getRandomIndex()\n      col = getRandomIndex()\n    }\n\n    const backup = grid[row][col]\n    grid[row][col] = 0\n\n    const gridCopy = copyGrid(grid)\n\n    global.counter = 0\n    solveGrid(gridCopy)\n\n    if (global.counter !== 1) {\n      grid[row][col] = backup\n      attempts--\n    }\n  }\n  return grid\n}\n\n/**\n * Compares two arrays (of any dimensions) and returns true if they are equal, otherwise returns false\n * @param arr1 first array to be compared\n * @param arr2 second array to be compared\n */\nexport const compareArrays = (arr1: any[], arr2: any[]): boolean => {\n  if (!Array.isArray(arr1) && !Array.isArray(arr2)) return arr1 === arr2\n\n  if (arr1.length !== arr2.length) return false\n\n  for (let i = 0, len = arr1.length; i < len; i++) {\n    if (!compareArrays(arr1[i], arr2[i])) return false\n  }\n\n  return true\n}\n","import { AnyAction } from 'redux'\n\nimport { GRID } from 'typings'\nimport { compareArrays, copyGrid, createFullGrid, removeNumbers } from 'utils'\n\nimport { IReducer } from './interfaces'\nimport * as types from './types'\n\nconst initialState: IReducer = { incorrectCount: 0, completed: false }\n\nconst reducer = (state = initialState, action: AnyAction): IReducer => {\n  switch (action.type) {\n    case types.CREATE_GRID:\n      const solvedGrid = createFullGrid()\n      const gridCopy = copyGrid(solvedGrid)\n      const challengeGrid = removeNumbers(gridCopy)\n      const workingGrid = copyGrid(challengeGrid)\n      return { ...state, challengeGrid, solvedGrid, workingGrid }\n\n    case types.FILL_BLOCK:\n      if (state.workingGrid && state.solvedGrid) {\n        if (\n          state.solvedGrid[action.coords[0]][action.coords[1]] !== action.value\n        ) {\n          alert('Incorrect Option!')\n          return { ...state, incorrectCount: state.incorrectCount + 1 }\n        }\n\n        state.workingGrid[action.coords[0]][action.coords[1]] = action.value\n\n        if (compareArrays(state.workingGrid, state.solvedGrid)) {\n          alert('Completed!')\n          return { ...state, completed: true }\n        }\n\n        return { ...state, workingGrid: [...state.workingGrid] as GRID }\n      }\n      return state\n\n    case types.SELECT_BLOCK:\n      return { ...state, selectedBlock: action.coords }\n\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import { FC } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Dispatch, AnyAction } from 'redux'\nimport styled, { css } from 'styled-components'\n\nimport { IReducer, selectBlock } from 'reducers'\nimport { INDEX, N } from 'typings'\n\ninterface IPropsC {\n  active?: boolean\n  puzzle?: boolean\n}\n\nexport const Container = styled.div<IPropsC>`\n  ${({ active, puzzle, theme }) => css`\n    align-items: center;\n    background-color: ${active ? theme.colors.blue : theme.colors.white};\n    border: solid 1px ${theme.colors.black};\n    cursor: pointer;\n    display: flex;\n    flex-grow: 1;\n    flex-shrink: 0;\n    flex-basis: 0;\n    font-size: 20px;\n    font-style: ${puzzle ? 'normal' : 'italic'};\n    font-weight: ${puzzle ? 'bold' : 'lighter'};\n    height: auto;\n    justify-content: center;\n    transition: ${theme.transition};\n    user-select: none;\n\n    &:before {\n      padding-top: 100%;\n      content: '';\n      float: left;\n    }\n\n    &:hover {\n      background-color: ${theme.colors.lightBlue};\n    }\n  `}\n`\n\ninterface IProps {\n  colIndex: INDEX\n  rowIndex: INDEX\n}\n\ninterface IState {\n  isActive: boolean\n  isPuzzle: boolean\n  value: N\n}\n\nconst Block: FC<IProps> = ({ colIndex, rowIndex }) => {\n  const state = useSelector<IReducer, IState>(\n    ({ challengeGrid, workingGrid, selectedBlock }) => ({\n      isActive: selectedBlock\n        ? selectedBlock[0] === rowIndex && selectedBlock[1] === colIndex\n        : false,\n      isPuzzle:\n        challengeGrid && challengeGrid[rowIndex][colIndex] !== 0 ? true : false,\n      value: workingGrid ? workingGrid[rowIndex][colIndex] : 0,\n    })\n  )\n  const dispatch = useDispatch<Dispatch<AnyAction>>()\n  const handleClick = () => {\n    if (!state.isActive) dispatch(selectBlock([rowIndex, colIndex]))\n  }\n\n  return (\n    <Container\n      active={state.isActive}\n      data-cy={`block-${rowIndex}-${colIndex}`}\n      onClick={handleClick}\n      puzzle={state.isPuzzle}\n    >\n      {state.value === 0 ? '' : state.value}\n    </Container>\n  )\n}\n\nexport default Block\n","import { Children, FC, useCallback, useEffect } from 'react'\nimport useMousetrap from 'react-hook-mousetrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AnyAction, Dispatch } from 'redux'\nimport styled, { css } from 'styled-components'\n\nimport { createGrid, IReducer, selectBlock, fillBlock } from 'reducers'\nimport { BLOCK_COORDS, INDEX, N, NUMBERS } from 'typings'\n\nimport Block from './block'\n\ninterface IState {\n  selectedBlock?: BLOCK_COORDS\n  selectedValue: N\n}\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 10px 0;\n`\n\nexport const Row = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-flow: row;\n\n    &:nth-child(1) {\n      border-top: solid 4px ${theme.colors.black};\n    }\n    &:nth-child(3),\n    &:nth-child(6) {\n      border-bottom: solid 3px ${theme.colors.black};\n    }\n    &:nth-child(9) {\n      border-bottom: solid 4px ${theme.colors.black};\n    }\n\n    div {\n      &:nth-child(1) {\n        border-left: solid 4px ${theme.colors.black};\n      }\n      &:nth-child(3),\n      &:nth-child(6),\n      &:nth-child(9) {\n        border-right: solid 4px ${theme.colors.black};\n      }\n      &:nth-child(4),\n      &:nth-child(7) {\n        border-left: none;\n      }\n    }\n  `}\n`\n\nconst Grid: FC = () => {\n  const state = useSelector<IReducer, IState>(\n    ({ selectedBlock, workingGrid }) => ({\n      selectedBlock,\n      selectedValue:\n        workingGrid && selectedBlock\n          ? workingGrid[selectedBlock[0]][selectedBlock[1]]\n          : 0,\n    })\n  )\n\n  const dispatch = useDispatch<Dispatch<AnyAction>>()\n\n  const create = useCallback(() => dispatch(createGrid()), [dispatch])\n\n  const fill = useCallback(\n    (n: NUMBERS) => {\n      if (state.selectedBlock && state.selectedValue === 0) {\n        dispatch(fillBlock(n, state.selectedBlock))\n      }\n    },\n    [dispatch, state.selectedBlock]\n  )\n\n  const moveDown = () => {\n    if (state.selectedBlock && state.selectedBlock[0] < 8)\n      dispatch(\n        selectBlock([\n          (state.selectedBlock[0] + 1) as INDEX,\n          state.selectedBlock[1],\n        ])\n      )\n  }\n\n  const moveLeft = () => {\n    if (state.selectedBlock && state.selectedBlock[1] > 0)\n      dispatch(\n        selectBlock([\n          state.selectedBlock[0],\n          (state.selectedBlock[1] - 1) as INDEX,\n        ])\n      )\n  }\n\n  const moveRight = () => {\n    if (state.selectedBlock && state.selectedBlock[1] < 8)\n      dispatch(\n        selectBlock([\n          state.selectedBlock[0],\n          (state.selectedBlock[1] + 1) as INDEX,\n        ])\n      )\n  }\n\n  const moveUp = () => {\n    if (state.selectedBlock && state.selectedBlock[0] > 0)\n      dispatch(\n        selectBlock([\n          (state.selectedBlock[0] - 1) as INDEX,\n          state.selectedBlock[1],\n        ])\n      )\n  }\n\n  useMousetrap('1', () => fill(1))\n  useMousetrap('2', () => fill(2))\n  useMousetrap('3', () => fill(3))\n  useMousetrap('4', () => fill(4))\n  useMousetrap('5', () => fill(5))\n  useMousetrap('6', () => fill(6))\n  useMousetrap('7', () => fill(7))\n  useMousetrap('8', () => fill(8))\n  useMousetrap('9', () => fill(9))\n  useMousetrap('down', moveDown)\n  useMousetrap('up', moveUp)\n  useMousetrap('left', moveLeft)\n  useMousetrap('right', moveRight)\n\n  useEffect(() => {\n    create()\n  }, [create])\n\n  return (\n    <Container data-cy=\"grid-container\">\n      {Children.toArray(\n        [...Array(9)].map((_, rowIndex) => (\n          <Row data-cy=\"grid-row-container\">\n            {Children.toArray(\n              [...Array(9)].map((_, colIndex) => (\n                <Block\n                  colIndex={colIndex as INDEX}\n                  rowIndex={rowIndex as INDEX}\n                />\n              ))\n            )}\n          </Row>\n        ))\n      )}\n    </Container>\n  )\n}\n\nexport default Grid\n","import React, { FC, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AnyAction, Dispatch } from 'redux'\n\nimport { Button } from 'components'\nimport { fillBlock, IReducer } from 'reducers'\nimport { BLOCK_COORDS, N, NUMBERS } from 'typings'\n\ninterface IProps {\n  value: NUMBERS\n}\n\ninterface IState {\n  selectedBlock?: BLOCK_COORDS\n  selectedValue: N\n}\n\nconst NumberButton: FC<IProps> = ({ value }) => {\n  const state = useSelector<IReducer, IState>(\n    ({ selectedBlock, workingGrid }) => ({\n      selectedBlock,\n      selectedValue:\n        workingGrid && selectedBlock\n          ? workingGrid[selectedBlock[0]][selectedBlock[1]]\n          : 0,\n    })\n  )\n\n  const dispatch = useDispatch<Dispatch<AnyAction>>()\n\n  const fill = useCallback(() => {\n    if (state.selectedBlock && state.selectedValue === 0) {\n      dispatch(fillBlock(value, state.selectedBlock))\n    }\n  }, [dispatch, state.selectedBlock, state.selectedValue, value])\n\n  return <Button onClick={fill}>{value}</Button>\n}\n\nexport default NumberButton\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  display: flex;\n  flex-flow: row;\n`\n","import React, { FC } from 'react'\n\nimport { NUMBERS } from 'typings'\n\nimport Button from './button'\nimport { Container } from './styles'\n\nconst Numbers: FC = () => (\n  <Container>\n    {([1, 2, 3, 4, 5, 6, 7, 8, 9] as NUMBERS[]).map((value) => (\n      <Button key={value} value={value} />\n    ))}\n  </Container>\n)\n\nexport default Numbers\n","import { useEffect, useState, useRef } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { IReducer } from 'reducers'\n\ninterface IState {\n  incorrectCount: number\n  completed: boolean\n}\n\nconst Timer = () => {\n  const [timer, setTimer] = useState(0)\n  const intervalRef = useRef<NodeJS.Timeout>()\n\n  const state = useSelector<IReducer, IState>(\n    ({ incorrectCount, completed }) => ({\n      incorrectCount,\n      completed,\n    })\n  )\n\n  useEffect(() => {\n    intervalRef.current = setInterval(() => {\n      setTimer((timer) => timer + 1)\n    }, 1000)\n\n    return () => {\n      clearInterval(intervalRef.current as NodeJS.Timeout)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (state.completed) clearInterval(intervalRef.current as NodeJS.Timeout)\n  }, [state.completed])\n\n  return (\n    <div>\n      <p>Timer: {timer}</p>\n      <p>Incorrect Count: {state.incorrectCount}</p>\n    </div>\n  )\n}\n\nexport default Timer\n","import styled, { css } from 'styled-components'\n\nexport const Button = styled.div`\n  ${({ theme }) => css`\n    align-items: center;\n    background-color: ${theme.colors.black};\n    border: 2px solid ${theme.colors.black};\n    border-radius: 4px;\n    color: ${theme.colors.white};\n    cursor: pointer;\n    display: flex;\n    flex: 1;\n    font-size: 16px;\n    font-weight: bold;\n    height: 40px;\n    justify-content: center;\n    margin: 4px 2px;\n    min-height: 40px;\n    opacity: 0.9;\n    padding: 0;\n    transition: ${theme.transition};\n    &:focus {\n      border-color: ${theme.colors.blue};\n      outline: none;\n    }\n    &:hover {\n      opacity: 0.6;\n    }\n  `}\n`\n","import styled, { css } from 'styled-components'\n\nexport const Card = styled.div`\n  ${({ theme }) => css`\n    background-color: ${theme.colors.white};\n    border-radius: 15px;\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    justify-content: center;\n    margin: 50% 0;\n    max-height: fit-content;\n    padding: 15px;\n  `}\n`\n","import styled from 'styled-components'\n\nexport const Content = styled.div`\n  max-width: 500px;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n`\n","import styled, { css } from 'styled-components'\n\nexport const Title = styled.h1`\n  ${({ theme }) => css`\n    color: ${theme.colors.white};\n    margin-top: 0;\n    text-align: center;\n  `}\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { createGlobalStyle } from 'styled-components'\n\nexport default createGlobalStyle`\n  html {\n    height: 100%;\n    body {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      margin: 0;\n\n      #root {\n        background: ${({ theme }) => theme.colors.background};\n        color: ${({ theme }) => theme.colors.black};\n        display: flex;\n        font-family: sans-serif;\n        height: 100%;\n        justify-content: center;\n        padding: 15px;\n      }\n    }\n  }\n`\n","import { createStore } from 'redux'\nimport { devToolsEnhancer } from 'redux-devtools-extension'\n\nimport reducer from 'reducers'\n\nconst configureStore = (\n  initialState = { incorrectCount: 0, completed: false }\n) => {\n  const store = createStore(reducer, initialState, devToolsEnhancer({}))\n  return store\n}\n\nexport default configureStore\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ThemeProvider } from 'styled-components'\nimport { Provider } from 'react-redux'\n\nimport { Card, Content, Grid, Numbers, Timer, Title } from 'components'\nimport * as serviceWorkerRegistration from 'serviceWorkerRegistration'\nimport reportWebVitals from 'reportWebVitals'\nimport { GlobalStyles, theme } from 'styles'\nimport configureStore from 'configure-store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <Provider store={configureStore()}>\n        <Content data-cy=\"content\">\n          <Title data-cy=\"title\">Sudoku</Title>\n          <Card data-cy=\"card\">\n            <Grid />\n            <Numbers />\n            <Timer />\n          </Card>\n        </Content>\n      </Provider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","export default {\n  colors: {\n    background: 'radial-gradient(#282c34cc, #282c34)',\n    black: '#282c34',\n    blue: '#a0e9fd',\n    lightBlue: '#caf3fe',\n    white: 'white',\n  },\n  transition: '0.3s',\n}\n","import reducer from './reducer'\n\nexport * from './actions'\nexport * from './interfaces'\n\nexport type IReducer = ReturnType<typeof reducer>\n\nexport default reducer\n","export const CREATE_GRID = 'CREATE_GRID'\nexport const FILL_BLOCK = 'FILL_BLOCK'\nexport const SELECT_BLOCK = 'SELECT_BLOCK'\n"],"sourceRoot":""}